{"version":3,"sources":["../src/ParseFormat.ts"],"names":["ATOM","COOKIE","FULL","ISO_8601","JULIAN","RFC_822","RFC_850","RFC_1036","RFC_1123","RFC_2822","RSS","W3C","formatDate","date","pattern","cal","calendar","local","dateFormat","index","doubled","match","step","matches","length","charAt","Math","floor","localiseNumbers","value","localiseDigits","formatNumber","len","num","formatName","shortNames","longNames","output","literal","day","dayOfWeek","dayNamesShort","dayNames","dayOfYear","weekOfYear","month","minMonth","monthNamesShort","monthNames","year","formatYear","epoch","CalendarBase","prototype","format","yearOrDate","monthOrPattern","y","m","d","CDate","validate","Calendars","invalidDate","errorMessages","missingNumberAt","unknownNameAt","unexpectedLiteralAt","unexpectedText","parseDate","iValue","iPattern","shortYear","getNumber","isDoubled","size","indexOf","localValue","substring","normaliseDigits","digits","RegExp","CalendarError","replace","parseInt","getName","offset","names","i","toLowerCase","checkLiteral","Number","NEGATIVE_INFINITY","doy","epochs","firstMonth","dim","daysInMonth","monthsInYear","parse"],"mappings":"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","sourcesContent":["/* http://keith-wood.name/calendars.html\r\n   Calendars parsing and formatting.\r\n   Written by Keith Wood (wood.keith{at}optusnet.com.au) June 2022.\r\n   Available under the MIT (http://keith-wood.name/licence.html) license.\r\n   Please attribute the author if you use it. */\r\n\r\nimport Calendars, { CalendarBase, CalendarError, CDate } from './Calendars'\r\n\r\n// Date form for ATOM (RFC 3339/ISO 8601).\r\nconst ATOM = 'yyyy-mm-dd'\r\n// Date form for cookies.\r\nconst COOKIE = 'D, dd M yyyy'\r\n// Date form for full date.\r\nconst FULL = 'DD, MM d, yyyy'\r\n// Date form for ISO 8601.\r\nconst ISO_8601 = 'yyyy-mm-dd'\r\n// Date form for Julian day number.\r\nconst JULIAN = 'J'\r\n// Date form for RFC 822.\r\nconst RFC_822 = 'D, d M yy'\r\n// Date form for RFC 850.\r\nconst RFC_850 = 'DD, dd-M-yy'\r\n// Date form for RFC 1036.\r\nconst RFC_1036 = 'D, d M yy'\r\n// Date form for RFC 1123.\r\nconst RFC_1123 = 'D, d M yyyy'\r\n// Date form for RFC 2822.\r\nconst RFC_2822 = 'D, d M yyyy'\r\n// Date form for RSS (RFC 822).\r\nconst RSS = 'D, d M yy'\r\n// Date form for W3c (ISO 8601).\r\nconst W3C = 'yyyy-mm-dd'\r\n\r\n/* Format a date object into a string value.\r\n   The format can be combinations of the following:\r\n    * d  - day of month (no leading zero)\r\n    * dd - day of month (two digit)\r\n    * o  - day of year (no leading zeros)\r\n    * oo - day of year (three digit)\r\n    * D  - day name short\r\n    * DD - day name long\r\n    * w  - week of year (no leading zero)\r\n    * ww - week of year (two digit)\r\n    * m  - month of year (no leading zero)\r\n    * mm - month of year (two digit)\r\n    * M  - month name short\r\n    * MM - month name long\r\n    * yy - year (two digit)\r\n    * yyyy - year (four digit)\r\n    * YYYY - formatted year\r\n    * e - epoch\r\n    * '...' - literal text\r\n    * '' - single quote */\r\nconst formatDate = function (date: CDate, pattern: string = ''): string {\r\n  const cal = date.calendar()\r\n  pattern = pattern || cal.local.dateFormat\r\n  let index = 0\r\n  // Check whether a format character is doubled\r\n  const doubled = (match: string, step?: number): boolean => {\r\n    let matches = 1\r\n    while (index + matches < pattern.length && pattern.charAt(index + matches) === match) {\r\n      matches++\r\n    }\r\n    index += matches - 1\r\n    return Math.floor(matches / (step || 1)) > 1\r\n  }\r\n  // Localise numbers if requested\r\n  const localiseNumbers = (value: string): string =>\r\n    cal.local.localiseDigits ? cal.local.localiseDigits(value) : value\r\n  // Format a number, with leading zeroes if necessary\r\n  const formatNumber = (match: string, value: number, len: number): string => {\r\n    let num = `${value}`\r\n    if (doubled(match)) {\r\n      while (num.length < len) {\r\n        num = `0${num}`\r\n      }\r\n    }\r\n    return num\r\n  }\r\n  // Format a name, short or long as requested\r\n  const formatName = (match: string, value: number, shortNames: string[], longNames: string[]): string =>\r\n    doubled(match) ? longNames[value] : shortNames[value]\r\n\r\n  let output = ''\r\n  let literal = false\r\n  for (index = 0; index < pattern.length; index++) {\r\n    if (literal) {\r\n      if (pattern.charAt(index) === \"'\" && !doubled(\"'\")) {\r\n        literal = false\r\n      } else {\r\n        output += pattern.charAt(index)\r\n      }\r\n    } else {\r\n      switch (pattern.charAt(index)) {\r\n        case 'd': output += localiseNumbers(formatNumber('d', date.day(), 2)); break\r\n        case 'D': output += formatName('D', date.dayOfWeek(), cal.local.dayNamesShort, cal.local.dayNames); break\r\n        case 'o': output += localiseNumbers(formatNumber('o', date.dayOfYear(), 3)); break\r\n        case 'w': output += localiseNumbers(formatNumber('w', date.weekOfYear(), 2)); break\r\n        case 'm': output += localiseNumbers(formatNumber('m', date.month(), 2)); break\r\n        case 'M': output += formatName('M', date.month() - cal.minMonth, cal.local.monthNamesShort, cal.local.monthNames); break\r\n        case 'y':\r\n          output += localiseNumbers(`${doubled('y', 2)\n              ? date.year()\r\n              : (date.year() % 100 < 10 ? '0' : '') + date.year() % 100}`)\r\n          break\r\n        case 'Y':\r\n          doubled('Y', 2)\r\n          output += date.formatYear()\r\n          break\r\n        case 'e': output += date.epoch(); break\r\n        case \"'\":\r\n          if (doubled(\"'\")) {\r\n            output += \"'\"\r\n          } else {\r\n            literal = true\r\n          }\r\n          break\r\n        default:\r\n          output += pattern.charAt(index)\r\n      }\r\n    }\r\n  }\r\n  return output\r\n}\r\n\r\nCalendarBase.prototype.format =\r\nfunction format (yearOrDate: CDate | number, monthOrPattern: string | number | undefined, day?: number, pattern?: string): string {\r\n  const [y, m, d] = yearOrDate instanceof CDate\r\n  // @ts-ignore: validate is protected\r\n    ? this.validate('', yearOrDate)\r\n  // @ts-ignore: validate is protected\r\n    : this.validate(Calendars.local.invalidDate, yearOrDate, monthOrPattern as number, day as number)\r\n  return yearOrDate instanceof CDate\r\n    ? formatDate(yearOrDate, monthOrPattern as string)\r\n    : formatDate(this.date(y, m, d), pattern)\r\n}\r\n\r\nconst errorMessages = {\r\n  missingNumberAt: 'Missing number at position {0}',\r\n  unknownNameAt: 'Unknown name at position {0}',\r\n  unexpectedLiteralAt: 'Unexpected literal at position {0}',\r\n  unexpectedText: 'Additional text found at end'\r\n}\r\n\r\n// Parse a string value into a date object.\r\nconst parseDate = function (cal: CalendarBase, value: string, pattern: string = ''): CDate {\r\n  pattern = pattern || cal.local.dateFormat\r\n  let iValue = 0 // Position in the value\r\n  let iPattern = 0 // Position in the pattern\r\n  let shortYear = false\r\n  // Check whether a format character is doubled\r\n  const doubled = (match: string, step?: number): boolean => {\r\n    let matches = 1\r\n    while (iPattern + matches < pattern.length && pattern.charAt(iPattern + matches) === match) {\r\n      matches++\r\n    }\r\n    iPattern += matches - 1\r\n    return Math.floor(matches / (step || 1)) > 1\r\n  }\r\n  // Extract a number from the string value\r\n  const getNumber = (match: string, step?: number): number => {\r\n    const isDoubled = doubled(match, step)\r\n    if (match === 'y') {\r\n      shortYear = !isDoubled\r\n    }\r\n    const size = [2, 3, isDoubled ? 4 : 2, isDoubled ? 4 : 2]['oyY'.indexOf(match) + 1]\r\n    // Normalise numbers if necessary\r\n    let localValue = value.substring(iValue)\r\n    localValue = cal.local.normaliseDigits ? cal.local.normaliseDigits(localValue) : localValue\r\n    const digits = new RegExp('^-?\\\\d{1,' + size + '}')\r\n    const num = localValue.match(digits)\r\n    if (!num) {\r\n      throw new CalendarError(errorMessages.missingNumberAt.replace(/\\{0\\}/, `${iValue}`))\r\n    }\r\n    iValue += cal.local.localiseDigits ? cal.local.localiseDigits(num[0]).length : num[0].length\r\n    return parseInt(num[0], 10)\r\n  }\r\n  // Extract a name from the string value and convert to an index\r\n  const getName = (match: string, shortNames: string[], longNames: string[], offset: number = 0): number => {\r\n    const names = (doubled(match) ? longNames : shortNames)\r\n    let index = -1\r\n    for (let i = 0; i < names.length; i++) {\r\n      if (value.substring(iValue, iValue + names[i].length).toLowerCase() === names[i].toLowerCase()) {\r\n        if (index === -1) {\r\n          index = i\r\n        } else if (names[i].length > names[index].length) {\r\n          index = i\r\n        }\r\n      }\r\n    }\r\n    if (index > -1) {\r\n      iValue += names[index].length\r\n      return index + offset\r\n    }\r\n    throw new CalendarError(errorMessages.unknownNameAt.replace(/\\{0\\}/, `${iValue}`))\r\n  }\r\n  // Confirm that a literal character matches the string value\r\n  const checkLiteral = (): void => {\r\n    if (value.charAt(iValue) !== pattern.charAt(iPattern)) {\r\n      throw new CalendarError(errorMessages.unexpectedLiteralAt.replace(/\\{0\\}/, `${iValue}`))\r\n    }\r\n    iValue++\r\n  }\r\n  let epoch = 1\r\n  let year = Number.NEGATIVE_INFINITY\r\n  let month = -1\r\n  let day = -1\r\n  let doy = -1\r\n  let literal = false\r\n  for (iPattern = 0; iPattern < pattern.length; iPattern++) {\r\n    if (literal) {\r\n      if (pattern.charAt(iPattern) === \"'\" && !doubled(\"'\")) {\r\n        literal = false\r\n      } else {\r\n        checkLiteral()\r\n      }\r\n    } else {\r\n      switch (pattern.charAt(iPattern)) {\r\n        case 'd': day = getNumber('d'); break\r\n        case 'D': getName('D', cal.local.dayNamesShort, cal.local.dayNames); break\r\n        case 'o': doy = getNumber('o'); break\r\n        case 'w': getNumber('w'); break\r\n        case 'm': month = getNumber('m'); break\r\n        case 'M': month = getName('M', cal.local.monthNamesShort, cal.local.monthNames, cal.minMonth); break\r\n        case 'y': year = getNumber('y', 2); break\r\n        case 'Y': year = getNumber('Y', 2); break\r\n        case 'e': epoch = getName('e', cal.local.epochs, cal.local.epochs); break\r\n        case '*': iValue = value.length; break\r\n        case \"'\":\r\n          if (doubled(\"'\")) {\r\n            checkLiteral()\r\n          } else {\r\n            literal = true\r\n          }\r\n          break\r\n        default: checkLiteral()\r\n      }\r\n    }\r\n  }\r\n  if (iValue < value.length) {\r\n    throw new CalendarError(errorMessages.unexpectedText)\r\n  }\r\n  if (year === Number.NEGATIVE_INFINITY) {\r\n    year = cal.date().year()\r\n  }\r\n  if (year < 100 && shortYear) {\r\n    year += Math.floor(cal.date().year() / 100) * 100\r\n  }\r\n  if (epoch === 0) {\r\n    year = -year\r\n  }\r\n  if (doy > -1) {\r\n    month = cal.firstMonth\r\n    day = doy\r\n    for (let dim = cal.daysInMonth(year, month); day > dim; dim = cal.daysInMonth(year, month)) {\r\n      month++\r\n      if (month > cal.monthsInYear(year)) {\r\n        month = cal.minMonth\r\n      }\r\n      day -= dim\r\n    }\r\n  }\r\n  return cal.date(year, month, day)\r\n}\r\n\r\nCalendarBase.prototype.parse = function (value: string, pattern: string = ''): CDate {\r\n  return parseDate(this, value, pattern)\r\n}\r\n\r\nexport { ATOM, COOKIE, FULL, ISO_8601, JULIAN, RFC_822, RFC_850, RFC_1036, RFC_1123, RFC_2822, RSS, W3C }\r\n"],"file":"ParseFormat.js"}