{"version":3,"sources":["../src/Ethiopian.ts"],"names":["defaultLocalisation","name","epochs","monthNames","monthNamesShort","dayNames","dayNamesShort","dayNamesMin","dateFormat","firstDay","isRTL","EthiopianCalendar","CalendarBase","constructor","language","localisations","leapYear","yearOrDate","y","CDate","validate","Calendars","local","invalidYear","minMonth","minDay","daysInMonth","month","m","invalidMonth","notDay","daysPerMonth","weekDay","day","dow","dayOfWeek","toJD","d","invalidDate","Math","floor","jdEpoch","fromJD","jd","c","year","date","register"],"mappings":"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","sourcesContent":["/* http://keith-wood.name/worldCalendars.html\r\n   Implementation of the Ethiopian calendar.\r\n   See http://en.wikipedia.org/wiki/Ethiopian_calendar.\r\n   See also Calendrical Calculations: The Millennium Edition\r\n   (http://emr.cs.iit.edu/home/reingold/calendar-book/index.shtml).\r\n   Written by Keith Wood (wood.keith{at}optusnet.com.au) May 2022.\r\n   Available under the MIT (http://keith-wood.name/licence.html) license.\r\n   Please attribute the author if you use it. */\r\n\r\nimport Calendars, { CalendarBase, CDate } from './Calendars'\r\nimport type { CalendarLocalisation, RegionalLocalisations } from './Calendars'\r\n\r\nconst defaultLocalisation: CalendarLocalisation = {\r\n  name: 'Ethiopian',\r\n  epochs: ['BEE', 'EE'],\r\n  monthNames: ['Meskerem', 'Tikemet', 'Hidar', 'Tahesas', 'Tir', 'Yekatit',\r\n    'Megabit', 'Miazia', 'Genbot', 'Sene', 'Hamle', 'Nehase', 'Pagume'],\r\n  monthNamesShort: ['Mes', 'Tik', 'Hid', 'Tah', 'Tir', 'Yek',\r\n    'Meg', 'Mia', 'Gen', 'Sen', 'Ham', 'Neh', 'Pag'],\r\n  dayNames: ['Ehud', 'Segno', 'Maksegno', 'Irob', 'Hamus', 'Arb', 'Kidame'],\r\n  dayNamesShort: ['Ehu', 'Seg', 'Mak', 'Iro', 'Ham', 'Arb', 'Kid'],\r\n  dayNamesMin: ['Eh', 'Se', 'Ma', 'Ir', 'Ha', 'Ar', 'Ki'],\r\n  dateFormat: 'dd/mm/yyyy',\r\n  firstDay: 0,\r\n  isRTL: false\r\n}\r\n\r\nclass EthiopianCalendar extends CalendarBase {\r\n  // Localisations for the plugin.\r\n  // Entries are objects indexed by the language code ('' being the default US/English). */\r\n  static localisations: RegionalLocalisations = { '': defaultLocalisation }\r\n\r\n  constructor (language: string = '') {\r\n    // Julian date of start of Ethiopian epoch: 27 August 8 CE (Gregorian).\r\n    super('Ethiopian', 1724220.5, EthiopianCalendar.localisations, language,\r\n      [30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 5], 13)\r\n  }\r\n\r\n  // Determine whether this date is in a leap year.\r\n  leapYear(date: CDate): boolean;\r\n  leapYear(year: number): boolean;\r\n  leapYear (yearOrDate: CDate | number): boolean {\r\n    let [y] = yearOrDate instanceof CDate\r\n      ? this.validate('', yearOrDate)\r\n      : this.validate(Calendars.local.invalidYear, yearOrDate, this.minMonth, this.minDay)\r\n    if (y < 0) { y++ }; // No year zero\r\n    return y % 4 === 3 || y % 4 === -1\r\n  }\r\n\r\n  // Retrieve the number of days in a month.\r\n  daysInMonth(date: CDate): number;\r\n  daysInMonth(year: number, month: number): number;\r\n  daysInMonth (yearOrDate: CDate | number, month?: number): number {\r\n    const [y, m] = yearOrDate instanceof CDate\r\n      ? this.validate('', yearOrDate)\r\n      : this.validate(Calendars.local.invalidMonth, yearOrDate, month as number, this.minDay, { notDay: true })\r\n    return this.daysPerMonth[m - 1] + (m === 13 && this.leapYear(y) ? 1 : 0)\r\n  }\r\n\r\n  // Determine whether this date is a week day.\r\n  weekDay(date: CDate): boolean;\r\n  weekDay(year: number, month: number, day: number): boolean;\r\n  weekDay (yearOrDate: CDate | number, month?: number, day?: number): boolean {\r\n    const dow = yearOrDate instanceof CDate\r\n      ? this.dayOfWeek(yearOrDate)\r\n      : this.dayOfWeek(yearOrDate, month as number, day as number)\r\n    return (dow || 7) < 6\r\n  }\r\n\r\n  // Retrieve the Julian day number equivalent for this date, i.e. days since January 1, 4713 BCE Greenwich noon.\r\n  toJD(date: CDate): number;\r\n  toJD(year: number, month: number, day: number): number;\r\n  toJD (yearOrDate: CDate | number, month?: number, day?: number): number {\r\n    let [y, m, d] = yearOrDate instanceof CDate\r\n      ? this.validate('', yearOrDate)\r\n      : this.validate(Calendars.local.invalidDate, yearOrDate, month as number, day as number)\r\n    if (y < 0) { y++ } // No year zero\r\n    return d + (m - 1) * 30 + (y - 1) * 365 + Math.floor(y / 4) + this.jdEpoch - 1\r\n  }\r\n\r\n  // Create a new date from a Julian day number.\r\n  fromJD (jd: number): CDate {\r\n    let c = Math.floor(jd) + 0.5 - this.jdEpoch\r\n    let year = Math.floor((c - Math.floor((c + 366) / 1461)) / 365) + 1\r\n    if (year <= 0) { year-- } // No year zero\r\n    c = Math.floor(jd) + 0.5 - this.date(year, 1, 1).toJD()\r\n    const month = Math.floor(c / 30) + 1\r\n    const day = c - (month - 1) * 30 + 1\r\n    return this.date(year, month, day)\r\n  }\r\n}\r\n\r\nCalendars.register('ethiopian', EthiopianCalendar)\r\n\r\nexport { EthiopianCalendar }\r\n"],"file":"Ethiopian.js"}