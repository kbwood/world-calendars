{"version":3,"sources":["../src/Persian.ts"],"names":["mod","a","b","Math","floor","defaultLocalisation","name","epochs","monthNames","monthNamesShort","dayNames","dayNamesShort","dayNamesMin","digits","undefined","dateFormat","firstDay","isRTL","PersianCalendar","CalendarBase","constructor","language","localisations","leapYear","yearOrDate","y","CDate","validate","Calendars","local","invalidYear","minMonth","minDay","weekOfYear","month","day","checkDate","date","add","dayOfWeek","dayOfYear","daysInMonth","m","invalidMonth","notDay","daysPerMonth","weekDay","dow","toJD","d","invalidDate","epBase","epYear","jdEpoch","fromJD","jd","dEpoch","cycle","cYear","yCycle","aux1","aux2","year","yDay","ceil","register"],"mappings":"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","sourcesContent":["/* http://keith-wood.name/worldCalendars.html\r\n   Implementation of the Persian or Jalali calendar.\r\n   Based on code from http://www.iranchamber.com/calendar/converter/iranian_calendar_converter.php.\r\n   See also http://en.wikipedia.org/wiki/Iranian_calendar.\r\n   Written by Keith Wood (wood.keith{at}optusnet.com.au) April 2022.\r\n   Available under the MIT (http://keith-wood.name/licence.html) license.\r\n   Please attribute the author if you use it. */\r\n\r\nimport Calendars, { CalendarBase, CDate } from './Calendars'\r\nimport type { CalendarLocalisation, RegionalLocalisations } from './Calendars'\r\n\r\n// Modulus function which works for non-integers.\r\nconst mod = (a: number, b: number): number => a - (b * Math.floor(a / b))\r\n\r\nconst defaultLocalisation: CalendarLocalisation = {\r\n  name: 'Persian',\r\n  epochs: ['BP', 'AP'],\r\n  monthNames: ['Farvardin', 'Ordibehesht', 'Khordad', 'Tir', 'Mordad', 'Shahrivar',\r\n    'Mehr', 'Aban', 'Azar', 'Day', 'Bahman', 'Esfand'],\r\n  monthNamesShort: ['Far', 'Ord', 'Kho', 'Tir', 'Mor', 'Sha', 'Meh', 'Aba', 'Aza', 'Day', 'Bah', 'Esf'],\r\n  dayNames: ['Yekshanbe', 'Doshanbe', 'Seshanbe', 'Chaharshanbe', 'Panjshanbe', 'Jom\\'e', 'Shanbe'],\r\n  dayNamesShort: ['Yek', 'Do', 'Se', 'ChÃ¦', 'Panj', 'Jom', 'Sha'],\r\n  dayNamesMin: ['Ye', 'Do', 'Se', 'Ch', 'Pa', 'Jo', 'Sh'],\r\n  digits: undefined,\r\n  dateFormat: 'yyyy/mm/dd',\r\n  firstDay: 6,\r\n  isRTL: false\r\n}\r\n\r\nclass PersianCalendar extends CalendarBase {\r\n  // Localisations for the plugin.\r\n  // Entries are objects indexed by the language code ('' being the default US/English). */\r\n  static localisations: RegionalLocalisations = { '': defaultLocalisation }\r\n\r\n  constructor (language: string = '') {\r\n    // Julian date of start of Persian epoch: 19 March 622 CE (Gregorian).\r\n    super('Persian', 1948320.5, PersianCalendar.localisations[language] || PersianCalendar.localisations[''],\r\n      [31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29])\r\n  }\r\n\r\n  // Determine whether this date is in a leap year.\r\n  leapYear(date: CDate): boolean;\r\n  leapYear(year: number): boolean;\r\n  leapYear (yearOrDate: CDate | number): boolean {\r\n    const [y] = yearOrDate instanceof CDate\r\n      ? this.validate('', yearOrDate)\r\n      : this.validate(Calendars.local.invalidYear, yearOrDate, this.minMonth, this.minDay)\r\n    return (((((y - (y > 0 ? 474 : 473)) % 2820) + 474 + 38) * 682) % 2816) < 682\r\n  }\r\n\r\n  // Determine the week of the year for a date - ISO 8601.\r\n  weekOfYear(date: CDate): number;\r\n  weekOfYear(year: number, month: number, day: number): number;\r\n  weekOfYear (yearOrDate: CDate | number, month?: number, day?: number): number {\r\n    // Find Saturday of this week starting on Saturday\r\n    let checkDate = yearOrDate instanceof CDate\r\n      ? this.date(yearOrDate)\r\n      : this.date(yearOrDate, month as number, day as number)\r\n    checkDate = checkDate.add(-((checkDate.dayOfWeek() + 1) % 7), 'd')\r\n    return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1\r\n  }\r\n\r\n  // Retrieve the number of days in a month.\r\n  daysInMonth(date: CDate): number;\r\n  daysInMonth(year: number, month: number): number;\r\n  daysInMonth (yearOrDate: CDate | number, month?: number): number {\r\n    const [y, m] = yearOrDate instanceof CDate\r\n      ? this.validate('', yearOrDate)\r\n      : this.validate(Calendars.local.invalidMonth, yearOrDate, month as number, this.minDay, { notDay: true })\r\n    return this.daysPerMonth[m - 1] + (m === 12 && this.leapYear(y) ? 1 : 0)\r\n  }\r\n\r\n  // Determine whether this date is a week day.\r\n  weekDay(date: CDate): boolean;\r\n  weekDay(year: number, month: number, day: number): boolean;\r\n  weekDay (yearOrDate: CDate | number, month?: number, day?: number): boolean {\r\n    const dow = yearOrDate instanceof CDate\r\n      ? this.dayOfWeek(yearOrDate)\r\n      : this.dayOfWeek(yearOrDate, month as number, day as number)\r\n    return dow !== 5\r\n  }\r\n\r\n  // Retrieve the Julian day number equivalent for this date, i.e. days since January 1, 4713 BCE Greenwich noon.\r\n  toJD(date: CDate): number;\r\n  toJD(year: number, month: number, day: number): number;\r\n  toJD (yearOrDate: CDate | number, month?: number, day?: number): number {\r\n    const [y, m, d] = yearOrDate instanceof CDate\r\n      ? this.validate('', yearOrDate)\r\n      : this.validate(Calendars.local.invalidDate, yearOrDate, month as number, day as number)\r\n    const epBase = y - (y >= 0 ? 474 : 473)\r\n    const epYear = 474 + mod(epBase, 2820)\r\n    return d + (m <= 7 ? (m - 1) * 31 : (m - 1) * 30 + 6) +\r\n      Math.floor((epYear * 682 - 110) / 2816) + (epYear - 1) * 365 +\r\n      Math.floor(epBase / 2820) * 1029983 + this.jdEpoch - 1\r\n  }\r\n\r\n  // Create a new date from a Julian day number.\r\n  fromJD (jd: number): CDate {\r\n    jd = Math.floor(jd) + 0.5\r\n    const dEpoch = jd - this.toJD(475, 1, 1)\r\n    const cycle = Math.floor(dEpoch / 1029983)\r\n    const cYear = mod(dEpoch, 1029983)\r\n    let yCycle = 2820\r\n    if (cYear !== 1029982) {\r\n      const aux1 = Math.floor(cYear / 366)\r\n      const aux2 = mod(cYear, 366)\r\n      yCycle = Math.floor(((2134 * aux1) + (2816 * aux2) + 2815) / 1028522) + aux1 + 1\r\n    }\r\n    let year = yCycle + (2820 * cycle) + 474\r\n    year = (year <= 0 ? year - 1 : year)\r\n    const yDay = jd - this.toJD(year, 1, 1) + 1\r\n    const month = (yDay <= 186 ? Math.ceil(yDay / 31) : Math.ceil((yDay - 6) / 30))\r\n    const day = jd - this.toJD(year, month, 1) + 1\r\n    return this.date(year, month, day)\r\n  }\r\n}\r\n\r\nCalendars.register('persian', PersianCalendar)\r\nCalendars.register('jalali', PersianCalendar)\r\n\r\nexport { PersianCalendar }\r\n"],"file":"Persian.js"}