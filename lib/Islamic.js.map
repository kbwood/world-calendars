{"version":3,"sources":["../src/Islamic.ts"],"names":["defaultLocalisation","name","epochs","monthNames","monthNamesShort","dayNames","dayNamesShort","dayNamesMin","digits","undefined","dateFormat","firstDay","isRTL","IslamicCalendar","BaseCalendar","constructor","language","localisations","leapYear","yearOrDate","y","CDate","validate","Calendars","local","invalidYear","minMonth","minDay","daysInYear","daysInMonth","month","m","invalidMonth","notDay","daysPerMonth","weekDay","day","dow","dayOfWeek","toJD","d","invalidDate","Math","ceil","floor","jdEpoch","fromJD","jd","year","min","date","register"],"mappings":"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","sourcesContent":["/* http://keith-wood.name/worldCalendars.html\r\n   Implementation of the Islamic or '16 civil' calendar.\r\n   Based on code from <a href=\"http://www.iranchamber.com/calendar/converter/iranian_calendar_converter.php\">http://www.iranchamber.com/calendar/converter/iranian_calendar_converter.php</a>.\r\n   See also <a href=\"http://en.wikipedia.org/wiki/Islamic_calendar\">http://en.wikipedia.org/wiki/Islamic_calendar</a>.\r\n   Written by Keith Wood (wood.keith{at}optusnet.com.au) May 2022.\r\n   Available under the MIT (http://keith-wood.name/licence.html) license.\r\n   Please attribute the author if you use it. */\r\n\r\nimport Calendars, { BaseCalendar, CDate } from './Calendars'\r\nimport type { CalendarLocalisation, RegionalLocalisations } from './Calendars'\r\n\r\nconst defaultLocalisation: CalendarLocalisation = {\r\n  name: 'Islamic',\r\n  epochs: ['BH', 'AH'],\r\n  monthNames: ['Muharram', 'Safar', 'Rabi\\' al-awwal', 'Rabi\\' al-thani', 'Jumada al-awwal', 'Jumada al-thani',\r\n    'Rajab', 'Sha\\'aban', 'Ramadan', 'Shawwal', 'Dhu al-Qi\\'dah', 'Dhu al-Hijjah'],\r\n  monthNamesShort: ['Muh', 'Saf', 'Rab1', 'Rab2', 'Jum1', 'Jum2', 'Raj', 'Sha\\'', 'Ram', 'Shaw', 'DhuQ', 'DhuH'],\r\n  dayNames: ['Yawm al-ahad', 'Yawm al-ithnayn', 'Yawm ath-thulaathaa\\'',\r\n    'Yawm al-arbi\\'aa\\'', 'Yawm al-khamÄ«s', 'Yawm al-jum\\'a', 'Yawm as-sabt'],\r\n  dayNamesShort: ['Aha', 'Ith', 'Thu', 'Arb', 'Kha', 'Jum', 'Sab'],\r\n  dayNamesMin: ['Ah', 'It', 'Th', 'Ar', 'Kh', 'Ju', 'Sa'],\r\n  digits: undefined,\r\n  dateFormat: 'yyyy/mm/dd',\r\n  firstDay: 6,\r\n  isRTL: false\r\n}\r\n\r\nclass IslamicCalendar extends BaseCalendar {\r\n  // Localisations for the plugin.\r\n  // Entries are objects indexed by the language code ('' being the default US/English). */\r\n  static localisations: RegionalLocalisations = { '': defaultLocalisation }\r\n\r\n  constructor (language: string = '') {\r\n    super('Islamic', 1948439.5, IslamicCalendar.localisations[language] || IslamicCalendar.localisations[''],\r\n      [30, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29])\r\n  }\r\n\r\n  // Determine whether this date is in a leap year.\r\n  leapYear(date: CDate): boolean;\r\n  leapYear(year: number): boolean;\r\n  leapYear (yearOrDate: CDate | number): boolean {\r\n    let [y] = yearOrDate instanceof CDate\r\n      ? this.validate('', yearOrDate)\r\n      : this.validate(Calendars.local.invalidYear, yearOrDate, this.minMonth, this.minDay)\r\n    if (y < 0) { y++ }; // No year zero\r\n    return (y * 11 + 14) % 30 < 11\r\n  }\r\n\r\n  // Retrieve the number of days in a year.\r\n  daysInYear (yearOrDate: CDate | number): number {\r\n    const [y] = yearOrDate instanceof CDate\r\n      ? this.validate('', yearOrDate)\r\n      : this.validate(Calendars.local.invalidYear, yearOrDate, this.minMonth, this.minDay)\r\n    return (this.leapYear(y) ? 355 : 354)\r\n  }\r\n\r\n  // Retrieve the number of days in a month.\r\n  daysInMonth(date: CDate): number;\r\n  daysInMonth(year: number, month: number): number;\r\n  daysInMonth (yearOrDate: CDate | number, month?: number): number {\r\n    const [y, m] = yearOrDate instanceof CDate\r\n      ? this.validate('', yearOrDate)\r\n      : this.validate(Calendars.local.invalidMonth, yearOrDate, month as number, this.minDay, { notDay: true })\r\n    return this.daysPerMonth[m - 1] + (m === 12 && this.leapYear(y) ? 1 : 0)\r\n  }\r\n\r\n  // Determine whether this date is a week day.\r\n  weekDay(date: CDate): boolean;\r\n  weekDay(year: number, month: number, day: number): boolean;\r\n  weekDay (yearOrDate: CDate | number, month?: number, day?: number): boolean {\r\n    const dow = yearOrDate instanceof CDate\r\n      ? this.dayOfWeek(yearOrDate)\r\n      : this.dayOfWeek(yearOrDate, month as number, day as number)\r\n    return dow !== 5\r\n  }\r\n\r\n  // Retrieve the Julian day number equivalent for this date, i.e. days since January 1, 4713 BCE Greenwich noon.\r\n  toJD(date: CDate): number;\r\n  toJD(year: number, month: number, day: number): number;\r\n  toJD (yearOrDate: CDate | number, month?: number, day?: number): number {\r\n    let [y, m, d] = yearOrDate instanceof CDate\r\n      ? this.validate('', yearOrDate)\r\n      : this.validate(Calendars.local.invalidDate, yearOrDate, month as number, day as number)\r\n    if (y <= 0) { y++ } // No year zero\r\n    return d + Math.ceil(29.5 * (m - 1)) + (y - 1) * 354 + Math.floor((3 + (11 * y)) / 30) + this.jdEpoch - 1\r\n  }\r\n\r\n  // Create a new date from a Julian day number.\r\n  fromJD (jd: number): CDate {\r\n    jd = Math.floor(jd) + 0.5\r\n    let year = Math.floor((30 * (jd - this.jdEpoch) + 10646) / 10631)\r\n    year = (year <= 0 ? year - 1 : year)\r\n    const month = Math.min(12, Math.ceil((jd - 29 - this.toJD(year, 1, 1)) / 29.5) + 1)\r\n    const day = jd - this.toJD(year, month, 1) + 1\r\n    return this.date(year, month, day)\r\n  }\r\n}\r\n\r\nCalendars.register('islamic', IslamicCalendar)\r\n\r\nexport { IslamicCalendar }\r\n"],"file":"Islamic.js"}