{"version":3,"sources":["../src/Julian.ts"],"names":["defaultLocalisation","name","epochs","monthNames","monthNamesShort","dayNames","dayNamesShort","dayNamesMin","digits","undefined","dateFormat","firstDay","isRTL","JulianCalendar","CalendarBase","constructor","language","localisations","leapYear","yearOrDate","y","CDate","validate","Calendars","local","invalidYear","minMonth","minDay","weekOfYear","month","day","checkDate","date","add","dayOfWeek","Math","floor","dayOfYear","daysInMonth","m","invalidMonth","notDay","daysPerMonth","weekDay","dow","toJD","d","invalidDate","fromJD","jd","a","b","c","e","year","register"],"mappings":"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","sourcesContent":["/* http://keith-wood.name/worldCalendars.html\r\n   Implementation of the Julian calendar.\r\n   Based on code from http://www.fourmilab.ch/documents/calendar/.\r\n   See also http://en.wikipedia.org/wiki/Julian_calendar.\r\n   Written by Keith Wood (wood.keith{at}optusnet.com.au) April 2022.\r\n   Available under the MIT (http://keith-wood.name/licence.html) license.\r\n   Please attribute the author if you use it. */\r\n\r\nimport Calendars, { CalendarBase, CDate } from './Calendars'\r\nimport type { CalendarLocalisation, RegionalLocalisations } from './Calendars'\r\n\r\nconst defaultLocalisation: CalendarLocalisation = {\r\n  name: 'Julian',\r\n  epochs: ['BC', 'AD'],\r\n  monthNames: ['January', 'February', 'March', 'April', 'May', 'June',\r\n    'July', 'August', 'September', 'October', 'November', 'December'],\r\n  monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n  dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\r\n  dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n  dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\r\n  digits: undefined,\r\n  dateFormat: 'mm/dd/yyyy',\r\n  firstDay: 0,\r\n  isRTL: false\r\n}\r\n\r\nclass JulianCalendar extends CalendarBase {\r\n  // Localisations for the plugin.\r\n  // Entries are objects indexed by the language code ('' being the default US/English). */\r\n  static localisations: RegionalLocalisations = { '': defaultLocalisation }\r\n\r\n  constructor (language: string = '') {\r\n    // Julian date of start of Julian epoch: 1 January 0001 AD = 30 December 0001 BCE (Gregorian).\r\n    super('Julian', 1721423.5, JulianCalendar.localisations[language] || JulianCalendar.localisations[''],\r\n      [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31])\r\n  }\r\n\r\n  // Determine whether this date is in a leap year.\r\n  leapYear(date: CDate): boolean;\r\n  leapYear(year: number): boolean;\r\n  leapYear (yearOrDate: CDate | number): boolean {\r\n    let [y] = yearOrDate instanceof CDate\n      ? this.validate('', yearOrDate)\r\n      : this.validate(Calendars.local.invalidYear, yearOrDate, this.minMonth, this.minDay)\r\n    if (y < 0) { y++ }; // No year zero\r\n    return y % 4 === 0\r\n  }\r\n\r\n  // Determine the week of the year for a date - ISO 8601.\r\n  weekOfYear(date: CDate): number;\r\n  weekOfYear(year: number, month: number, day: number): number;\r\n  weekOfYear (yearOrDate: CDate | number, month?: number, day?: number): number {\r\n    // Find Thursday of this week starting on Monday\r\n    let checkDate = yearOrDate instanceof CDate\n      ? this.date(yearOrDate)\r\n      : this.date(yearOrDate, month as number, day as number)\r\n    checkDate = checkDate.add(4 - (checkDate.dayOfWeek() || 7), 'd')\r\n    return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1\r\n  }\r\n\r\n  // Retrieve the number of days in a month.\r\n  daysInMonth(date: CDate): number;\r\n  daysInMonth(year: number, month: number): number;\r\n  daysInMonth (yearOrDate: CDate | number, month?: number): number {\r\n    const [y, m] = yearOrDate instanceof CDate\n      ? this.validate('', yearOrDate)\r\n      : this.validate(Calendars.local.invalidMonth, yearOrDate, month as number, this.minDay, { notDay: true })\r\n    return this.daysPerMonth[m - 1] + (m === 2 && this.leapYear(y) ? 1 : 0)\r\n  }\r\n\r\n  // Determine whether this date is a week day.\r\n  weekDay(date: CDate): boolean;\r\n  weekDay(year: number, month: number, day: number): boolean;\r\n  weekDay (yearOrDate: CDate | number, month?: number, day?: number): boolean {\r\n    const dow = yearOrDate instanceof CDate\n      ? this.dayOfWeek(yearOrDate)\r\n      : this.dayOfWeek(yearOrDate, month as number, day as number)\r\n    return (dow || 7) < 6\r\n  }\r\n\r\n  // Retrieve the Julian day number equivalent for this date, i.e. days since January 1, 4713 BCE Greenwich noon.\r\n  toJD(date: CDate): number;\r\n  toJD(year: number, month: number, day: number): number;\r\n  toJD (yearOrDate: CDate | number, month?: number, day?: number): number {\r\n    let [y, m, d] = yearOrDate instanceof CDate\n      ? this.validate('', yearOrDate)\r\n      : this.validate(Calendars.local.invalidDate, yearOrDate, month as number, day as number)\r\n    if (y < 0) { y++ } // No year zero\r\n    // Jean Meeus algorithm, \"Astronomical Algorithms\", 1991\r\n    if (m < 3) {\r\n      m += 12\r\n      y--\r\n    }\r\n    return Math.floor(365.25 * (y + 4716)) + Math.floor(30.6001 * (m + 1)) + d - 1524.5\r\n  }\r\n\r\n  // Create a new date from a Julian day number.\r\n  fromJD (jd: number): CDate {\r\n    // Jean Meeus algorithm, \"Astronomical Algorithms\", 1991\r\n    const a = Math.floor(jd + 0.5)\r\n    const b = a + 1524\r\n    const c = Math.floor((b - 122.1) / 365.25)\r\n    const d = Math.floor(365.25 * c)\r\n    const e = Math.floor((b - d) / 30.6001)\r\n    const day = b - d - Math.floor(30.6001 * e)\r\n    const month = e - Math.floor(e < 14 ? 1 : 13)\r\n    let year = c - Math.floor(month > 2 ? 4716 : 4715)\r\n    if (year <= 0) { year-- } // No year zero\r\n    return this.date(year, month, day)\r\n  }\r\n}\r\n\r\nCalendars.register('julian', JulianCalendar)\r\n\r\nexport { JulianCalendar }\r\n"],"file":"Julian.js"}