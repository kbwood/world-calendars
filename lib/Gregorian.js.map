{"version":3,"file":"Gregorian.js","names":["defaultLocalisation","name","epochs","monthNames","monthNamesShort","dayNames","dayNamesShort","dayNamesMin","dateFormat","firstDay","isRTL","GregorianCalendar","CalendarBase","constructor","language","localisations","leapYear","yearOrDate","y","CDate","validate","Calendars","local","invalidYear","minMonth","minDay","weekOfYear","month","day","checkDate","date","add","dayOfWeek","Math","floor","dayOfYear","daysInMonth","m","invalidMonth","notDay","daysPerMonth","weekDay","dow","toJD","dateParts","invalidDate","gregorianToJD","fromJD","jd","year","gregorianFromJD","toJSDate","gregorianToJSDate","fromJSDate","jsd","d","gregorianFromJSDate","register"],"sources":["../src/Gregorian.ts"],"sourcesContent":["/* http://keith-wood.name/worldCalendars.html\r\n   Implementation of the Proleptic Gregorian Calendar.\r\n   See http://en.wikipedia.org/wiki/Gregoriancalendar\r\n   and http://en.wikipedia.org/wiki/Proleptic_Gregoriancalendar.\r\n   Written by Keith Wood (wood.keith{at}optusnet.com.au) April 2022.\r\n   Available under the MIT (http://keith-wood.name/licence.html) license.\r\n   Please attribute the author if you use it. */\r\n\r\nimport Calendars, { CalendarBase, CDate } from './Calendars'\r\nimport type { CalendarLocalisation, RegionalLocalisations } from './Calendars'\r\n\r\nconst defaultLocalisation: CalendarLocalisation = {\r\n  name: 'Gregorian',\r\n  epochs: ['BCE', 'CE'],\r\n  monthNames: ['January', 'February', 'March', 'April', 'May', 'June',\r\n    'July', 'August', 'September', 'October', 'November', 'December'],\r\n  monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n  dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\r\n  dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n  dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\r\n  dateFormat: 'mm/dd/yyyy',\r\n  firstDay: 0,\r\n  isRTL: false\r\n}\r\n\r\nclass GregorianCalendar extends CalendarBase {\r\n  // Localisations for the plugin.\r\n  // Entries are objects indexed by the language code ('' being the default US/English). */\r\n  static localisations: RegionalLocalisations = { '': defaultLocalisation }\r\n\r\n  constructor (language: string = '') {\r\n    // Julian date of start of Gregorian epoch: 1 January 0001 CE (Gregorian).\r\n    super('Gregorian', 1721425.5, GregorianCalendar.localisations, language,\r\n      [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31])\r\n  }\r\n\r\n  // Determine whether this date is in a leap year.\r\n  leapYear(date: CDate): boolean;\r\n  leapYear(year: number): boolean;\r\n  leapYear (yearOrDate: CDate | number): boolean {\r\n    let [y] = yearOrDate instanceof CDate\n      ? this.validate('', yearOrDate)\r\n      : this.validate(Calendars.local.invalidYear, yearOrDate, this.minMonth, this.minDay)\r\n    if (y < 0) { y++ } // No year zero\r\n    return y % 4 === 0 && (y % 100 !== 0 || y % 400 === 0)\r\n  }\r\n\r\n  // Determine the week of the year for a date - ISO 8601.\r\n  weekOfYear(date: CDate): number;\r\n  weekOfYear(year: number, month: number, day: number): number;\r\n  weekOfYear (yearOrDate: CDate | number, month?: number, day?: number): number {\r\n    // Find Thursday of this week starting on Monday\r\n    let checkDate = yearOrDate instanceof CDate\n      ? this.date(yearOrDate)\r\n      : this.date(yearOrDate, month as number, day as number)\r\n    checkDate = checkDate.add(4 - (checkDate.dayOfWeek() || 7), 'd')\r\n    return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1\r\n  }\r\n\r\n  // Retrieve the number of days in a month.\r\n  daysInMonth(date: CDate): number;\r\n  daysInMonth(year: number, month: number): number;\r\n  daysInMonth (yearOrDate: CDate | number, month?: number): number {\r\n    const [y, m] = yearOrDate instanceof CDate\n      ? this.validate('', yearOrDate)\r\n      : this.validate(Calendars.local.invalidMonth, yearOrDate, month as number, this.minDay, { notDay: true })\r\n    return this.daysPerMonth[m - 1] + (m === 2 && this.leapYear(y) ? 1 : 0)\r\n  }\r\n\r\n  // Determine whether this date is a week day.\r\n  weekDay(date: CDate): boolean;\r\n  weekDay(year: number, month: number, day: number): boolean;\r\n  weekDay (yearOrDate: CDate | number, month?: number, day?: number): boolean {\r\n    const dow = yearOrDate instanceof CDate\n      ? this.dayOfWeek(yearOrDate)\r\n      : this.dayOfWeek(yearOrDate, month as number, day as number)\r\n    return (dow || 7) < 6\r\n  }\r\n\r\n  // Retrieve the Julian day number equivalent for this date, i.e. days since January 1, 4713 BCE Greenwich noon.\r\n  toJD(date: CDate): number;\r\n  toJD(year: number, month: number, day: number): number;\r\n  toJD (yearOrDate: CDate | number, month?: number, day?: number): number {\r\n    const dateParts = yearOrDate instanceof CDate\n      ? this.validate(Calendars.local.invalidDate, yearOrDate)\r\n      : this.validate(Calendars.local.invalidDate, yearOrDate, month as number, day as number)\r\n    return this.gregorianToJD(dateParts)\r\n  }\r\n\r\n  // Create a new date from a Julian day number.\r\n  fromJD (jd: number): CDate {\r\n    const [year, month, day] = this.gregorianFromJD(jd)\r\n    return this.date(year, month, day)\r\n  }\r\n\r\n  // Convert this date to a standard (Gregorian) JavaScript Date.\r\n  toJSDate(date: CDate): Date;\r\n  toJSDate(year: number, month: number, day: number): Date;\r\n  toJSDate (yearOrDate: CDate | number, month?: number, day?: number): Date {\r\n    const dateParts = yearOrDate instanceof CDate\n      ? this.validate('', yearOrDate)\r\n      : this.validate(Calendars.local.invalidDate, yearOrDate, month as number, day as number)\r\n    return this.gregorianToJSDate(dateParts)\r\n  }\r\n\r\n  // Create a new date from a standard (Gregorian) JavaScript Date.\r\n  fromJSDate (jsd: Date): CDate {\r\n    const [y, m, d] = this.gregorianFromJSDate(jsd)\r\n    return this.date(y, m, d)\r\n  }\r\n}\r\n\r\nCalendars.register('gregorian', GregorianCalendar)\r\n\r\nexport { GregorianCalendar }\r\n"],"mappings":"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"}