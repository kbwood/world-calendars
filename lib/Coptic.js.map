{"version":3,"sources":["../src/Coptic.ts"],"names":["defaultLocalisation","name","epochs","monthNames","monthNamesShort","dayNames","dayNamesShort","dayNamesMin","digits","undefined","dateFormat","firstDay","isRTL","CopticCalendar","BaseCalendar","constructor","language","localisations","leapYear","yearOrDate","y","CDate","validate","Calendars","local","invalidYear","minMonth","minDay","weekOfYear","month","day","checkDate","date","add","dayOfWeek","Math","floor","dayOfYear","daysInMonth","m","invalidMonth","notDay","daysPerMonth","weekDay","dow","toJD","d","invalidDate","jdEpoch","fromJD","jd","c","year","register"],"mappings":"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","sourcesContent":["/* http://keith-wood.name/worldCalendars.html\r\n   Implementation of the Coptic calendar.\r\n   See <a href=\"http://en.wikipedia.org/wiki/Coptic_calendar\">http://en.wikipedia.org/wiki/Coptic_calendar</a>.\r\n   See also Calendrical Calculations: The Millennium Edition\r\n   (<a href=\"http://emr.cs.iit.edu/home/reingold/calendar-book/index.shtml\">http://emr.cs.iit.edu/home/reingold/calendar-book/index.shtml</a>).\r\n   Written by Keith Wood (wood.keith{at}optusnet.com.au) April 2022.\r\n   Available under the MIT (http://keith-wood.name/licence.html) license.\r\n   Please attribute the author if you use it. */\r\n\r\nimport Calendars, { BaseCalendar, CDate } from './Calendars'\r\nimport type { CalendarLocalisation, RegionalLocalisations } from './Calendars'\r\n\r\nconst defaultLocalisation: CalendarLocalisation = {\r\n  name: 'Coptic',\r\n  epochs: ['BAM', 'AM'],\r\n  monthNames: ['Thout', 'Paopi', 'Hathor', 'Koiak', 'Tobi', 'Meshir',\r\n    'Paremhat', 'Paremoude', 'Pashons', 'Paoni', 'Epip', 'Mesori', 'Pi Kogi Enavot'],\r\n  monthNamesShort: ['Tho', 'Pao', 'Hath', 'Koi', 'Tob', 'Mesh',\r\n    'Pat', 'Pad', 'Pash', 'Pao', 'Epi', 'Meso', 'PiK'],\r\n  dayNames: ['Tkyriaka', 'Pesnau', 'Pshoment', 'Peftoou', 'Ptiou', 'Psoou', 'Psabbaton'],\r\n  dayNamesShort: ['Tky', 'Pes', 'Psh', 'Pef', 'Pti', 'Pso', 'Psa'],\r\n  dayNamesMin: ['Tk', 'Pes', 'Psh', 'Pef', 'Pt', 'Pso', 'Psa'],\r\n  digits: undefined,\r\n  dateFormat: 'dd/mm/yyyy',\r\n  firstDay: 0,\r\n  isRTL: false\r\n}\r\n\r\nclass CopticCalendar extends BaseCalendar {\r\n  // Localisations for the plugin.\r\n  // Entries are objects indexed by the language code ('' being the default US/English). */\r\n  static localisations: RegionalLocalisations = { '': defaultLocalisation }\r\n\r\n  constructor (language: string = '') {\r\n    super('Coptic', 1825029.5, CopticCalendar.localisations[language] || CopticCalendar.localisations[''],\r\n      [30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 5], 13)\r\n  }\r\n\r\n  // Determine whether this date is in a leap year.\r\n  leapYear(date: CDate): boolean;\r\n  leapYear(year: number): boolean;\r\n  leapYear (yearOrDate: CDate | number): boolean {\r\n    let [y] = yearOrDate instanceof CDate\r\n      ? this.validate('', yearOrDate)\r\n      : this.validate(Calendars.local.invalidYear, yearOrDate, this.minMonth, this.minDay)\r\n    if (y < 0) { y++ }; // No year zero\r\n    return y % 4 === 3 || y % 4 === -1\r\n  }\r\n\r\n  // Determine the week of the year for a date.\r\n  weekOfYear(date: CDate): number;\r\n  weekOfYear(year: number, month: number, day: number): number;\r\n  weekOfYear (yearOrDate: CDate | number, month?: number, day?: number): number {\r\n    // Find Sunday of this week starting on Sunday\r\n    let checkDate = yearOrDate instanceof CDate\r\n      ? this.date(yearOrDate)\r\n      : this.date(yearOrDate, month as number, day as number)\r\n    checkDate = checkDate.add(-checkDate.dayOfWeek(), 'd')\r\n    return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1\r\n  }\r\n\r\n  // Retrieve the number of days in a month.\r\n  daysInMonth(date: CDate): number;\r\n  daysInMonth(year: number, month: number): number;\r\n  daysInMonth (yearOrDate: CDate | number, month?: number): number {\r\n    const [y, m] = yearOrDate instanceof CDate\r\n      ? this.validate('', yearOrDate)\r\n      : this.validate(Calendars.local.invalidMonth, yearOrDate, month as number, this.minDay, { notDay: true })\r\n    return this.daysPerMonth[m - 1] + (m === 13 && this.leapYear(y) ? 1 : 0)\r\n  }\r\n\r\n  // Determine whether this date is a week day.\r\n  weekDay(date: CDate): boolean;\r\n  weekDay(year: number, month: number, day: number): boolean;\r\n  weekDay (yearOrDate: CDate | number, month?: number, day?: number): boolean {\r\n    const dow = yearOrDate instanceof CDate\r\n      ? this.dayOfWeek(yearOrDate)\r\n      : this.dayOfWeek(yearOrDate, month as number, day as number)\r\n    return (dow || 7) < 6\r\n  }\r\n\r\n  // Retrieve the Julian day number equivalent for this date, i.e. days since January 1, 4713 BCE Greenwich noon.\r\n  toJD(date: CDate): number;\r\n  toJD(year: number, month: number, day: number): number;\r\n  toJD (yearOrDate: CDate | number, month?: number, day?: number): number {\r\n    let [y, m, d] = yearOrDate instanceof CDate\r\n      ? this.validate('', yearOrDate)\r\n      : this.validate(Calendars.local.invalidDate, yearOrDate, month as number, day as number)\r\n    if (y < 0) { y++ } // No year zero\r\n    return d + (m - 1) * 30 + (y - 1) * 365 + Math.floor(y / 4) + this.jdEpoch - 1\r\n  }\r\n\r\n  // Create a new date from a Julian day number.\r\n  fromJD (jd: number): CDate {\r\n    let c = Math.floor(jd) + 0.5 - this.jdEpoch\r\n    let year = Math.floor((c - Math.floor((c + 366) / 1461)) / 365) + 1\r\n    if (year <= 0) { year-- } // No year zero\r\n    c = Math.floor(jd) + 0.5 - this.date(year, 1, 1).toJD()\r\n    const month = Math.floor(c / 30) + 1\r\n    const day = c - (month - 1) * 30 + 1\r\n    return this.date(year, month, day)\r\n  }\r\n}\r\n\r\nCalendars.register('coptic', CopticCalendar)\r\n\r\nexport { CopticCalendar }\r\n"],"file":"Coptic.js"}