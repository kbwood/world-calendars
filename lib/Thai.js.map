{"version":3,"file":"Thai.js","names":["_Calendars","_interopRequireWildcard","require","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_defineProperty","_toPropertyKey","value","enumerable","configurable","writable","_toPrimitive","Symbol","toPrimitive","TypeError","String","Number","defaultLocalisation","name","epochs","monthNames","monthNamesShort","dayNames","dayNamesShort","dayNamesMin","dateFormat","firstDay","isRTL","ThaiCalendar","CalendarBase","constructor","language","arguments","length","undefined","localisations","leapYear","yearOrDate","y","CDate","validate","Calendars","local","invalidYear","minMonth","minDay","gregorian","thaiToGregorianYear","weekOfYear","month","day","m","d","daysInMonth","invalidMonth","notDay","daysPerMonth","weekDay","dow","dayOfWeek","toJD","invalidDate","fromJD","jd","date","gregorianToThaiYear","year","yearsOffset","exports","instance","register"],"sources":["../src/Thai.ts"],"sourcesContent":["/* http://keith-wood.name/worldCalendars.html\r\n   Implementation of the Thai calendar.\r\n   See http://en.wikipedia.org/wiki/Thai_calendar.\r\n   Written by Keith Wood (kbwood.au{at}gmail.com) May 2022.\r\n   Available under the MIT (http://keith-wood.name/licence.html) license.\r\n   Please attribute the author if you use it. */\r\n\r\nimport Calendars, { CalendarBase, CDate } from './Calendars'\r\nimport './Gregorian'\r\nimport type { CalendarLocalisation, RegionalLocalisations } from './Calendars'\r\n\r\nconst defaultLocalisation: CalendarLocalisation = {\r\n  name: 'Thai',\r\n  epochs: ['BBE', 'BE'],\r\n  monthNames: ['January', 'February', 'March', 'April', 'May', 'June',\r\n    'July', 'August', 'September', 'October', 'November', 'December'],\r\n  monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n  dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\r\n  dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n  dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\r\n  dateFormat: 'dd/mm/yyyy',\r\n  firstDay: 0,\r\n  isRTL: false\r\n}\r\n\r\nclass ThaiCalendar extends CalendarBase {\r\n  // Localisations for the plugin.\r\n  // Entries are objects indexed by the language code ('' being the default US/English). */\r\n  static localisations: RegionalLocalisations = { '': defaultLocalisation }\r\n  static gregorian: CalendarBase = Calendars.instance('gregorian')\r\n  static readonly yearsOffset: number = 543\r\n\r\n  constructor (language: string = '') {\r\n    // Julian date of start of Thai epoch: 1 January 543 BCE (Gregorian)\r\n    super('Thai', 1523098.5, ThaiCalendar.localisations, language,\r\n      [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31])\r\n  }\r\n\r\n  // Determine whether this date is in a leap year.\r\n  leapYear(date: CDate): boolean;\r\n  leapYear(year: number): boolean;\r\n  leapYear (yearOrDate: CDate | number): boolean {\r\n    const [y] = yearOrDate instanceof CDate\r\n      ? this.validate('', yearOrDate)\r\n      : this.validate(Calendars.local.invalidYear, yearOrDate, this.minMonth, this.minDay)\r\n    return ThaiCalendar.gregorian.leapYear(this.thaiToGregorianYear(y))\r\n  }\r\n\r\n  // Determine the week of the year for a date - ISO 8601.\r\n  weekOfYear(date: CDate): number;\r\n  weekOfYear(year: number, month: number, day: number): number;\r\n  weekOfYear (yearOrDate: CDate | number, month?: number, day?: number): number {\r\n    const [y, m, d] = yearOrDate instanceof CDate\r\n      ? this.validate('', yearOrDate)\r\n      : this.validate(Calendars.local.invalidYear, yearOrDate, month as number, day as number)\r\n    return ThaiCalendar.gregorian.weekOfYear(this.thaiToGregorianYear(y), m, d)\r\n  }\r\n\r\n  // Retrieve the number of days in a month.\r\n  daysInMonth(date: CDate): number;\r\n  daysInMonth(year: number, month: number): number;\r\n  daysInMonth (yearOrDate: CDate | number, month?: number): number {\r\n    const [y, m] = yearOrDate instanceof CDate\r\n      ? this.validate('', yearOrDate)\r\n      : this.validate(Calendars.local.invalidMonth, yearOrDate, month as number, this.minDay, { notDay: true })\r\n    return this.daysPerMonth[m - 1] + (m === 2 && this.leapYear(y) ? 1 : 0)\r\n  }\r\n\r\n  // Determine whether this date is a week day.\r\n  weekDay(date: CDate): boolean;\r\n  weekDay(year: number, month: number, day: number): boolean;\r\n  weekDay (yearOrDate: CDate | number, month?: number, day?: number): boolean {\r\n    const dow = yearOrDate instanceof CDate\r\n      ? this.dayOfWeek(yearOrDate)\r\n      : this.dayOfWeek(yearOrDate, month as number, day as number)\r\n    return (dow || 7) < 6\r\n  }\r\n\r\n  // Retrieve the Julian day number equivalent for this date, i.e. days since January 1, 4713 BCE Greenwich noon.\r\n  toJD(date: CDate): number;\r\n  toJD(year: number, month: number, day: number): number;\r\n  toJD (yearOrDate: CDate | number, month?: number, day?: number): number {\r\n    const [y, m, d] = yearOrDate instanceof CDate\r\n      ? this.validate('', yearOrDate)\r\n      : this.validate(Calendars.local.invalidDate, yearOrDate, month as number, day as number)\r\n    return ThaiCalendar.gregorian.toJD(this.thaiToGregorianYear(y), m, d)\r\n  }\r\n\r\n  // Create a new date from a Julian day number.\r\n  fromJD (jd: number): CDate {\r\n    const date = ThaiCalendar.gregorian.fromJD(jd)\r\n    return this.date(this.gregorianToThaiYear(date.year()), date.month(), date.day())\r\n  }\r\n\r\n  // Convert Thai to Gregorian year.\r\n  private thaiToGregorianYear (year: number): number {\r\n    return year - ThaiCalendar.yearsOffset - (year >= 1 && year <= ThaiCalendar.yearsOffset ? 1 : 0)\r\n  }\r\n\r\n  // Convert Gregorian to Thai year.\r\n  private gregorianToThaiYear (year: number): number {\r\n    return year + ThaiCalendar.yearsOffset + (year >= -ThaiCalendar.yearsOffset && year <= -1 ? 1 : 0)\r\n  }\r\n}\r\n\r\nCalendars.register('thai', ThaiCalendar)\r\n\r\nexport { ThaiCalendar }\r\n"],"mappings":"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","ignoreList":[]}