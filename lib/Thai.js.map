{"version":3,"file":"Thai.js","names":["defaultLocalisation","name","epochs","monthNames","monthNamesShort","dayNames","dayNamesShort","dayNamesMin","dateFormat","firstDay","isRTL","ThaiCalendar","CalendarBase","constructor","language","localisations","leapYear","yearOrDate","y","CDate","validate","Calendars","local","invalidYear","minMonth","minDay","gregorian","thaiToGregorianYear","weekOfYear","month","day","m","d","daysInMonth","invalidMonth","notDay","daysPerMonth","weekDay","dow","dayOfWeek","toJD","invalidDate","fromJD","jd","date","gregorianToThaiYear","year","yearsOffset","instance","register"],"sources":["../src/Thai.ts"],"sourcesContent":["/* http://keith-wood.name/worldCalendars.html\r\n   Implementation of the Thai calendar.\r\n   See http://en.wikipedia.org/wiki/Thai_calendar.\r\n   Written by Keith Wood (wood.keith{at}optusnet.com.au) May 2022.\r\n   Available under the MIT (http://keith-wood.name/licence.html) license.\r\n   Please attribute the author if you use it. */\r\n\r\nimport Calendars, { CalendarBase, CDate } from './Calendars'\r\nimport './Gregorian'\r\nimport type { CalendarLocalisation, RegionalLocalisations } from './Calendars'\r\n\r\nconst defaultLocalisation: CalendarLocalisation = {\r\n  name: 'Thai',\r\n  epochs: ['BBE', 'BE'],\r\n  monthNames: ['January', 'February', 'March', 'April', 'May', 'June',\r\n    'July', 'August', 'September', 'October', 'November', 'December'],\r\n  monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n  dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\r\n  dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n  dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\r\n  dateFormat: 'dd/mm/yyyy',\r\n  firstDay: 0,\r\n  isRTL: false\r\n}\r\n\r\nclass ThaiCalendar extends CalendarBase {\r\n  // Localisations for the plugin.\r\n  // Entries are objects indexed by the language code ('' being the default US/English). */\r\n  static localisations: RegionalLocalisations = { '': defaultLocalisation }\r\n  static gregorian: CalendarBase = Calendars.instance('gregorian')\r\n  static readonly yearsOffset: number = 543\r\n\r\n  constructor (language: string = '') {\r\n    // Julian date of start of Thai epoch: 1 January 543 BCE (Gregorian)\r\n    super('Thai', 1523098.5, ThaiCalendar.localisations, language,\r\n      [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31])\r\n  }\r\n\r\n  // Determine whether this date is in a leap year.\r\n  leapYear(date: CDate): boolean;\r\n  leapYear(year: number): boolean;\r\n  leapYear (yearOrDate: CDate | number): boolean {\r\n    const [y] = yearOrDate instanceof CDate\r\n      ? this.validate('', yearOrDate)\r\n      : this.validate(Calendars.local.invalidYear, yearOrDate, this.minMonth, this.minDay)\r\n    return ThaiCalendar.gregorian.leapYear(this.thaiToGregorianYear(y))\r\n  }\r\n\r\n  // Determine the week of the year for a date - ISO 8601.\r\n  weekOfYear(date: CDate): number;\r\n  weekOfYear(year: number, month: number, day: number): number;\r\n  weekOfYear (yearOrDate: CDate | number, month?: number, day?: number): number {\r\n    const [y, m, d] = yearOrDate instanceof CDate\r\n      ? this.validate('', yearOrDate)\r\n      : this.validate(Calendars.local.invalidYear, yearOrDate, month as number, day as number)\r\n    return ThaiCalendar.gregorian.weekOfYear(this.thaiToGregorianYear(y), m, d)\r\n  }\r\n\r\n  // Retrieve the number of days in a month.\r\n  daysInMonth(date: CDate): number;\r\n  daysInMonth(year: number, month: number): number;\r\n  daysInMonth (yearOrDate: CDate | number, month?: number): number {\r\n    const [y, m] = yearOrDate instanceof CDate\r\n      ? this.validate('', yearOrDate)\r\n      : this.validate(Calendars.local.invalidMonth, yearOrDate, month as number, this.minDay, { notDay: true })\r\n    return this.daysPerMonth[m - 1] + (m === 2 && this.leapYear(y) ? 1 : 0)\r\n  }\r\n\r\n  // Determine whether this date is a week day.\r\n  weekDay(date: CDate): boolean;\r\n  weekDay(year: number, month: number, day: number): boolean;\r\n  weekDay (yearOrDate: CDate | number, month?: number, day?: number): boolean {\r\n    const dow = yearOrDate instanceof CDate\r\n      ? this.dayOfWeek(yearOrDate)\r\n      : this.dayOfWeek(yearOrDate, month as number, day as number)\r\n    return (dow || 7) < 6\r\n  }\r\n\r\n  // Retrieve the Julian day number equivalent for this date, i.e. days since January 1, 4713 BCE Greenwich noon.\r\n  toJD(date: CDate): number;\r\n  toJD(year: number, month: number, day: number): number;\r\n  toJD (yearOrDate: CDate | number, month?: number, day?: number): number {\r\n    const [y, m, d] = yearOrDate instanceof CDate\r\n      ? this.validate('', yearOrDate)\r\n      : this.validate(Calendars.local.invalidDate, yearOrDate, month as number, day as number)\r\n    return ThaiCalendar.gregorian.toJD(this.thaiToGregorianYear(y), m, d)\r\n  }\r\n\r\n  // Create a new date from a Julian day number.\r\n  fromJD (jd: number): CDate {\r\n    const date = ThaiCalendar.gregorian.fromJD(jd)\r\n    return this.date(this.gregorianToThaiYear(date.year()), date.month(), date.day())\r\n  }\r\n\r\n  // Convert Thai to Gregorian year.\r\n  private thaiToGregorianYear (year: number): number {\r\n    return year - ThaiCalendar.yearsOffset - (year >= 1 && year <= ThaiCalendar.yearsOffset ? 1 : 0)\r\n  }\r\n\r\n  // Convert Gregorian to Thai year.\r\n  private gregorianToThaiYear (year: number): number {\r\n    return year + ThaiCalendar.yearsOffset + (year >= -ThaiCalendar.yearsOffset && year <= -1 ? 1 : 0)\r\n  }\r\n}\r\n\r\nCalendars.register('thai', ThaiCalendar)\r\n\r\nexport { ThaiCalendar }\r\n"],"mappings":"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"}