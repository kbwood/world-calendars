{"version":3,"sources":["../src/Nanakshahi.ts"],"names":["defaultLocalisation","name","epochs","monthNames","monthNamesShort","dayNames","dayNamesShort","dayNamesMin","dateFormat","firstDay","isRTL","NanakshahiCalendar","CalendarBase","constructor","language","localisations","leapYear","yearOrDate","y","CDate","validate","Calendars","local","invalidYear","minMonth","minDay","gregorian","weekOfYear","month","day","checkDate","date","add","dayOfWeek","Math","floor","dayOfYear","daysInMonth","m","invalidMonth","notDay","daysPerMonth","weekDay","dow","toJD","d","invalidDate","doy","mn","fromJD","jd","year","jdEpoch","instance","register"],"mappings":"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","sourcesContent":["/* http://keith-wood.name/worldCalendars.html\r\n   Implementation of the Nanakshahi calendar.\r\n   See also https://en.wikipedia.org/wiki/Nanakshahi_calendar.\r\n   Written by Keith Wood (wood.keith{at}optusnet.com.au) May 2022.\r\n   Available under the MIT (http://keith-wood.name/licence.html) license.\r\n   Please attribute the author if you use it. */\r\n\r\nimport Calendars, { CalendarBase, CDate } from './Calendars'\r\nimport './Gregorian'\r\nimport type { CalendarLocalisation, RegionalLocalisations } from './Calendars'\r\n\r\nconst defaultLocalisation: CalendarLocalisation = {\r\n  name: 'Nanakshahi',\r\n  epochs: ['BN', 'AN'],\r\n  monthNames: ['Chet', 'Vaisakh', 'Jeth', 'Harh', 'Sawan', 'Bhadon',\r\n    'Assu', 'Katak', 'Maghar', 'Poh', 'Magh', 'Phagun'],\r\n  monthNamesShort: ['Che', 'Vai', 'Jet', 'Har', 'Saw', 'Bha', 'Ass', 'Kat', 'Mgr', 'Poh', 'Mgh', 'Pha'],\r\n  dayNames: ['Somvaar', 'Mangalvar', 'Budhvaar', 'Veervaar', 'Shukarvaar', 'Sanicharvaar', 'Etvaar'],\r\n  dayNamesShort: ['Som', 'Mangal', 'Budh', 'Veer', 'Shukar', 'Sanichar', 'Et'],\r\n  dayNamesMin: ['So', 'Ma', 'Bu', 'Ve', 'Sh', 'Sa', 'Et'],\r\n  dateFormat: 'dd-mm-yyyy',\r\n  firstDay: 0,\r\n  isRTL: false\r\n}\r\n\r\nclass NanakshahiCalendar extends CalendarBase {\r\n  // Localisations for the plugin.\r\n  // Entries are objects indexed by the language code ('' being the default US/English). */\r\n  static localisations: RegionalLocalisations = { '': defaultLocalisation }\r\n  static gregorian: CalendarBase = Calendars.instance('gregorian')\r\n\r\n  constructor (language: string = '') {\r\n    // Julian date of start of Nanakshahi epoch: 14 March 1469 CE (Gregorian).\r\n    super('Nanakshahi', 2257673.5, NanakshahiCalendar.localisations, language,\r\n      [31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30, 30])\r\n  }\r\n\r\n  // Determine whether this date is in a leap year.\r\n  leapYear(date: CDate): boolean;\r\n  leapYear(year: number): boolean;\r\n  leapYear (yearOrDate: CDate | number): boolean {\r\n    const [y] = yearOrDate instanceof CDate\r\n      ? this.validate('', yearOrDate)\r\n      : this.validate(Calendars.local.invalidYear, yearOrDate, this.minMonth, this.minDay)\r\n    return NanakshahiCalendar.gregorian.leapYear(y + (y < 1 ? 1 : 0) + 1469)\r\n  }\r\n\r\n  // Determine the week of the year for a date - ISO 8601.\r\n  weekOfYear(date: CDate): number;\r\n  weekOfYear(year: number, month: number, day: number): number;\r\n  weekOfYear (yearOrDate: CDate | number, month?: number, day?: number): number {\r\n    // Find Thursday of this week starting on Monday\r\n    let checkDate = yearOrDate instanceof CDate\r\n      ? this.date(yearOrDate)\r\n      : this.date(yearOrDate, month as number, day as number)\r\n    checkDate = checkDate.add(1 - (checkDate.dayOfWeek() || 7), 'd')\r\n    return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1\r\n  }\r\n\r\n  // Retrieve the number of days in a month.\r\n  daysInMonth(date: CDate): number;\r\n  daysInMonth(year: number, month: number): number;\r\n  daysInMonth (yearOrDate: CDate | number, month?: number): number {\r\n    const [y, m] = yearOrDate instanceof CDate\r\n      ? this.validate('', yearOrDate)\r\n      : this.validate(Calendars.local.invalidMonth, yearOrDate, month as number, this.minDay, { notDay: true })\r\n    return this.daysPerMonth[m - 1] + (m === 12 && this.leapYear(y) ? 1 : 0)\r\n  }\r\n\r\n  // Determine whether this date is a week day.\r\n  weekDay(date: CDate): boolean;\r\n  weekDay(year: number, month: number, day: number): boolean;\r\n  weekDay (yearOrDate: CDate | number, month?: number, day?: number): boolean {\r\n    const dow = yearOrDate instanceof CDate\r\n      ? this.dayOfWeek(yearOrDate)\r\n      : this.dayOfWeek(yearOrDate, month as number, day as number)\r\n    return (dow || 7) < 6\r\n  }\r\n\r\n  // Retrieve the Julian day number equivalent for this date, i.e. days since January 1, 4713 BCE Greenwich noon.\r\n  toJD(date: CDate): number;\r\n  toJD(year: number, month: number, day: number): number;\r\n  toJD (yearOrDate: CDate | number, month?: number, day?: number): number {\r\n    let [y, m, d] = yearOrDate instanceof CDate\r\n      ? this.validate('', yearOrDate)\r\n      : this.validate(Calendars.local.invalidDate, yearOrDate, month as number, day as number)\r\n    if (y < 0) { y++ } // No year zero\r\n    let doy = d\r\n    for (let mn = 1; mn < m; mn++) {\r\n      doy += this.daysPerMonth[mn - 1]\r\n    }\r\n    return doy + NanakshahiCalendar.gregorian.toJD(y + 1468, 3, 13)\r\n  }\r\n\r\n  // Create a new date from a Julian day number.\r\n  fromJD (jd: number): CDate {\r\n    jd = Math.floor(jd + 0.5)\r\n    let year = Math.floor((jd - (this.jdEpoch - 1)) / 366)\r\n    if (year <= 0) { year-- }\r\n    while (jd >= this.toJD(year + (year === -1 ? 2 : 1), 1, 1)) {\r\n      year++\r\n      if (year === 0) { year++ }\r\n    }\r\n    let day = jd - Math.floor(this.toJD(year, 1, 1))\r\n    let month = 1\r\n    while (day > this.daysInMonth(year, month)) {\r\n      day -= this.daysInMonth(year, month)\r\n      month++\r\n    }\r\n    return this.date(year, month, day)\r\n  }\r\n}\r\n\r\nCalendars.register('nanakshahi', NanakshahiCalendar)\r\n\r\nexport { NanakshahiCalendar }\r\n"],"file":"Nanakshahi.js"}