{"version":3,"file":"Nanakshahi.js","names":["_Calendars","_interopRequireWildcard","require","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_defineProperty","_toPropertyKey","value","enumerable","configurable","writable","_toPrimitive","Symbol","toPrimitive","TypeError","String","Number","defaultLocalisation","name","epochs","monthNames","monthNamesShort","dayNames","dayNamesShort","dayNamesMin","dateFormat","firstDay","isRTL","NanakshahiCalendar","CalendarBase","constructor","language","arguments","length","undefined","localisations","leapYear","yearOrDate","y","CDate","validate","Calendars","local","invalidYear","minMonth","minDay","gregorian","weekOfYear","month","day","checkDate","date","add","dayOfWeek","Math","floor","dayOfYear","daysInMonth","m","invalidMonth","notDay","daysPerMonth","weekDay","dow","toJD","d","invalidDate","doy","mn","fromJD","jd","year","jdEpoch","exports","instance","register"],"sources":["../src/Nanakshahi.ts"],"sourcesContent":["/* http://keith-wood.name/worldCalendars.html\r\n   Implementation of the Nanakshahi calendar.\r\n   See also https://en.wikipedia.org/wiki/Nanakshahi_calendar.\r\n   Written by Keith Wood (kbwood.au{at}gmail.com) May 2022.\r\n   Available under the MIT (http://keith-wood.name/licence.html) license.\r\n   Please attribute the author if you use it. */\r\n\r\nimport Calendars, { CalendarBase, CDate } from './Calendars'\r\nimport './Gregorian'\r\nimport type { CalendarLocalisation, RegionalLocalisations } from './Calendars'\r\n\r\nconst defaultLocalisation: CalendarLocalisation = {\r\n  name: 'Nanakshahi',\r\n  epochs: ['BN', 'AN'],\r\n  monthNames: ['Chet', 'Vaisakh', 'Jeth', 'Harh', 'Sawan', 'Bhadon',\r\n    'Assu', 'Katak', 'Maghar', 'Poh', 'Magh', 'Phagun'],\r\n  monthNamesShort: ['Che', 'Vai', 'Jet', 'Har', 'Saw', 'Bha', 'Ass', 'Kat', 'Mgr', 'Poh', 'Mgh', 'Pha'],\r\n  dayNames: ['Somvaar', 'Mangalvar', 'Budhvaar', 'Veervaar', 'Shukarvaar', 'Sanicharvaar', 'Etvaar'],\r\n  dayNamesShort: ['Som', 'Mangal', 'Budh', 'Veer', 'Shukar', 'Sanichar', 'Et'],\r\n  dayNamesMin: ['So', 'Ma', 'Bu', 'Ve', 'Sh', 'Sa', 'Et'],\r\n  dateFormat: 'dd-mm-yyyy',\r\n  firstDay: 0,\r\n  isRTL: false\r\n}\r\n\r\nclass NanakshahiCalendar extends CalendarBase {\r\n  // Localisations for the plugin.\r\n  // Entries are objects indexed by the language code ('' being the default US/English). */\r\n  static localisations: RegionalLocalisations = { '': defaultLocalisation }\r\n  static gregorian: CalendarBase = Calendars.instance('gregorian')\r\n\r\n  constructor (language: string = '') {\r\n    // Julian date of start of Nanakshahi epoch: 14 March 1469 CE (Gregorian).\r\n    super('Nanakshahi', 2257673.5, NanakshahiCalendar.localisations, language,\r\n      [31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30, 30])\r\n  }\r\n\r\n  // Determine whether this date is in a leap year.\r\n  leapYear(date: CDate): boolean;\r\n  leapYear(year: number): boolean;\r\n  leapYear (yearOrDate: CDate | number): boolean {\r\n    const [y] = yearOrDate instanceof CDate\r\n      ? this.validate('', yearOrDate)\r\n      : this.validate(Calendars.local.invalidYear, yearOrDate, this.minMonth, this.minDay)\r\n    return NanakshahiCalendar.gregorian.leapYear(y + (y < 1 ? 1 : 0) + 1469)\r\n  }\r\n\r\n  // Determine the week of the year for a date - ISO 8601.\r\n  weekOfYear(date: CDate): number;\r\n  weekOfYear(year: number, month: number, day: number): number;\r\n  weekOfYear (yearOrDate: CDate | number, month?: number, day?: number): number {\r\n    // Find Thursday of this week starting on Monday\r\n    let checkDate = yearOrDate instanceof CDate\r\n      ? this.date(yearOrDate)\r\n      : this.date(yearOrDate, month as number, day as number)\r\n    checkDate = checkDate.add(1 - (checkDate.dayOfWeek() || 7), 'd')\r\n    return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1\r\n  }\r\n\r\n  // Retrieve the number of days in a month.\r\n  daysInMonth(date: CDate): number;\r\n  daysInMonth(year: number, month: number): number;\r\n  daysInMonth (yearOrDate: CDate | number, month?: number): number {\r\n    const [y, m] = yearOrDate instanceof CDate\r\n      ? this.validate('', yearOrDate)\r\n      : this.validate(Calendars.local.invalidMonth, yearOrDate, month as number, this.minDay, { notDay: true })\r\n    return this.daysPerMonth[m - 1] + (m === 12 && this.leapYear(y) ? 1 : 0)\r\n  }\r\n\r\n  // Determine whether this date is a week day.\r\n  weekDay(date: CDate): boolean;\r\n  weekDay(year: number, month: number, day: number): boolean;\r\n  weekDay (yearOrDate: CDate | number, month?: number, day?: number): boolean {\r\n    const dow = yearOrDate instanceof CDate\r\n      ? this.dayOfWeek(yearOrDate)\r\n      : this.dayOfWeek(yearOrDate, month as number, day as number)\r\n    return (dow || 7) < 6\r\n  }\r\n\r\n  // Retrieve the Julian day number equivalent for this date, i.e. days since January 1, 4713 BCE Greenwich noon.\r\n  toJD(date: CDate): number;\r\n  toJD(year: number, month: number, day: number): number;\r\n  toJD (yearOrDate: CDate | number, month?: number, day?: number): number {\r\n    let [y, m, d] = yearOrDate instanceof CDate\r\n      ? this.validate('', yearOrDate)\r\n      : this.validate(Calendars.local.invalidDate, yearOrDate, month as number, day as number)\r\n    if (y < 0) { y++ } // No year zero\r\n    let doy = d\r\n    for (let mn = 1; mn < m; mn++) {\r\n      doy += this.daysPerMonth[mn - 1]\r\n    }\r\n    return doy + NanakshahiCalendar.gregorian.toJD(y + 1468, 3, 13)\r\n  }\r\n\r\n  // Create a new date from a Julian day number.\r\n  fromJD (jd: number): CDate {\r\n    jd = Math.floor(jd + 0.5)\r\n    let year = Math.floor((jd - (this.jdEpoch - 1)) / 366)\r\n    if (year <= 0) { year-- }\r\n    while (jd >= this.toJD(year + (year === -1 ? 2 : 1), 1, 1)) {\r\n      year++\r\n      if (year === 0) { year++ }\r\n    }\r\n    let day = jd - Math.floor(this.toJD(year, 1, 1))\r\n    let month = 1\r\n    while (day > this.daysInMonth(year, month)) {\r\n      day -= this.daysInMonth(year, month)\r\n      month++\r\n    }\r\n    return this.date(year, month, day)\r\n  }\r\n}\r\n\r\nCalendars.register('nanakshahi', NanakshahiCalendar)\r\n\r\nexport { NanakshahiCalendar }\r\n"],"mappings":";;;;;;AAOA,IAAAA,UAAA,GAAAC,uBAAA,CAAAC,OAAA;AACAA,OAAA;AAAoB,SAAAC,yBAAAC,CAAA,6BAAAC,OAAA,mBAAAC,CAAA,OAAAD,OAAA,IAAAE,CAAA,OAAAF,OAAA,YAAAF,wBAAA,YAAAA,yBAAAC,CAAA,WAAAA,CAAA,GAAAG,CAAA,GAAAD,CAAA,KAAAF,CAAA;AAAA,SAAAH,wBAAAG,CAAA,EAAAE,CAAA,SAAAA,CAAA,IAAAF,CAAA,IAAAA,CAAA,CAAAI,UAAA,SAAAJ,CAAA,eAAAA,CAAA,uBAAAA,CAAA,yBAAAA,CAAA,WAAAK,OAAA,EAAAL,CAAA,QAAAG,CAAA,GAAAJ,wBAAA,CAAAG,CAAA,OAAAC,CAAA,IAAAA,CAAA,CAAAG,GAAA,CAAAN,CAAA,UAAAG,CAAA,CAAAI,GAAA,CAAAP,CAAA,OAAAQ,CAAA,KAAAC,SAAA,UAAAC,CAAA,GAAAC,MAAA,CAAAC,cAAA,IAAAD,MAAA,CAAAE,wBAAA,WAAAC,CAAA,IAAAd,CAAA,oBAAAc,CAAA,OAAAC,cAAA,CAAAC,IAAA,CAAAhB,CAAA,EAAAc,CAAA,SAAAG,CAAA,GAAAP,CAAA,GAAAC,MAAA,CAAAE,wBAAA,CAAAb,CAAA,EAAAc,CAAA,UAAAG,CAAA,KAAAA,CAAA,CAAAV,GAAA,IAAAU,CAAA,CAAAC,GAAA,IAAAP,MAAA,CAAAC,cAAA,CAAAJ,CAAA,EAAAM,CAAA,EAAAG,CAAA,IAAAT,CAAA,CAAAM,CAAA,IAAAd,CAAA,CAAAc,CAAA,YAAAN,CAAA,CAAAH,OAAA,GAAAL,CAAA,EAAAG,CAAA,IAAAA,CAAA,CAAAe,GAAA,CAAAlB,CAAA,EAAAQ,CAAA,GAAAA,CAAA;AAAA,SAAAW,gBAAAnB,CAAA,EAAAE,CAAA,EAAAC,CAAA,YAAAD,CAAA,GAAAkB,cAAA,CAAAlB,CAAA,MAAAF,CAAA,GAAAW,MAAA,CAAAC,cAAA,CAAAZ,CAAA,EAAAE,CAAA,IAAAmB,KAAA,EAAAlB,CAAA,EAAAmB,UAAA,MAAAC,YAAA,MAAAC,QAAA,UAAAxB,CAAA,CAAAE,CAAA,IAAAC,CAAA,EAAAH,CAAA;AAAA,SAAAoB,eAAAjB,CAAA,QAAAc,CAAA,GAAAQ,YAAA,CAAAtB,CAAA,uCAAAc,CAAA,GAAAA,CAAA,GAAAA,CAAA;AAAA,SAAAQ,aAAAtB,CAAA,EAAAD,CAAA,2BAAAC,CAAA,KAAAA,CAAA,SAAAA,CAAA,MAAAH,CAAA,GAAAG,CAAA,CAAAuB,MAAA,CAAAC,WAAA,kBAAA3B,CAAA,QAAAiB,CAAA,GAAAjB,CAAA,CAAAgB,IAAA,CAAAb,CAAA,EAAAD,CAAA,uCAAAe,CAAA,SAAAA,CAAA,YAAAW,SAAA,yEAAA1B,CAAA,GAAA2B,MAAA,GAAAC,MAAA,EAAA3B,CAAA,KARpB;AACA;AACA;AACA;AACA;AACA;AAMA,IAAM4B,mBAAyC,GAAG;EAChDC,IAAI,EAAE,YAAY;EAClBC,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;EACpBC,UAAU,EAAE,CAAC,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAC/D,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC;EACrDC,eAAe,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;EACrGC,QAAQ,EAAE,CAAC,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,UAAU,EAAE,YAAY,EAAE,cAAc,EAAE,QAAQ,CAAC;EAClGC,aAAa,EAAE,CAAC,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,IAAI,CAAC;EAC5EC,WAAW,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;EACvDC,UAAU,EAAE,YAAY;EACxBC,QAAQ,EAAE,CAAC;EACXC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,kBAAkB,SAASC,uBAAY,CAAC;EAM5CC,WAAWA,CAAA,EAAyB;IAAA,IAAvBC,QAAgB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;IAChC;IACA,KAAK,CAAC,YAAY,EAAE,SAAS,EAAEJ,kBAAkB,CAACO,aAAa,EAAEJ,QAAQ,EACvE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;EACrD;;EAEA;;EAGAK,QAAQA,CAAEC,UAA0B,EAAW;IAC7C,IAAM,CAACC,CAAC,CAAC,GAAGD,UAAU,YAAYE,gBAAK,GACnC,IAAI,CAACC,QAAQ,CAAC,EAAE,EAAEH,UAAU,CAAC,GAC7B,IAAI,CAACG,QAAQ,CAACC,kBAAS,CAACC,KAAK,CAACC,WAAW,EAAEN,UAAU,EAAE,IAAI,CAACO,QAAQ,EAAE,IAAI,CAACC,MAAM,CAAC;IACtF,OAAOjB,kBAAkB,CAACkB,SAAS,CAACV,QAAQ,CAACE,CAAC,IAAIA,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;EAC1E;;EAEA;;EAGAS,UAAUA,CAAEV,UAA0B,EAAEW,KAAc,EAAEC,GAAY,EAAU;IAC5E;IACA,IAAIC,SAAS,GAAGb,UAAU,YAAYE,gBAAK,GACvC,IAAI,CAACY,IAAI,CAACd,UAAU,CAAC,GACrB,IAAI,CAACc,IAAI,CAACd,UAAU,EAAEW,KAAK,EAAYC,GAAa,CAAC;IACzDC,SAAS,GAAGA,SAAS,CAACE,GAAG,CAAC,CAAC,IAAIF,SAAS,CAACG,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,GAAG,CAAC;IAChE,OAAOC,IAAI,CAACC,KAAK,CAAC,CAACL,SAAS,CAACM,SAAS,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC;EACxD;;EAEA;;EAGAC,WAAWA,CAAEpB,UAA0B,EAAEW,KAAc,EAAU;IAC/D,IAAM,CAACV,CAAC,EAAEoB,CAAC,CAAC,GAAGrB,UAAU,YAAYE,gBAAK,GACtC,IAAI,CAACC,QAAQ,CAAC,EAAE,EAAEH,UAAU,CAAC,GAC7B,IAAI,CAACG,QAAQ,CAACC,kBAAS,CAACC,KAAK,CAACiB,YAAY,EAAEtB,UAAU,EAAEW,KAAK,EAAY,IAAI,CAACH,MAAM,EAAE;MAAEe,MAAM,EAAE;IAAK,CAAC,CAAC;IAC3G,OAAO,IAAI,CAACC,YAAY,CAACH,CAAC,GAAG,CAAC,CAAC,IAAIA,CAAC,KAAK,EAAE,IAAI,IAAI,CAACtB,QAAQ,CAACE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EAC1E;;EAEA;;EAGAwB,OAAOA,CAAEzB,UAA0B,EAAEW,KAAc,EAAEC,GAAY,EAAW;IAC1E,IAAMc,GAAG,GAAG1B,UAAU,YAAYE,gBAAK,GACnC,IAAI,CAACc,SAAS,CAAChB,UAAU,CAAC,GAC1B,IAAI,CAACgB,SAAS,CAAChB,UAAU,EAAEW,KAAK,EAAYC,GAAa,CAAC;IAC9D,OAAO,CAACc,GAAG,IAAI,CAAC,IAAI,CAAC;EACvB;;EAEA;;EAGAC,IAAIA,CAAE3B,UAA0B,EAAEW,KAAc,EAAEC,GAAY,EAAU;IACtE,IAAI,CAACX,CAAC,EAAEoB,CAAC,EAAEO,CAAC,CAAC,GAAG5B,UAAU,YAAYE,gBAAK,GACvC,IAAI,CAACC,QAAQ,CAAC,EAAE,EAAEH,UAAU,CAAC,GAC7B,IAAI,CAACG,QAAQ,CAACC,kBAAS,CAACC,KAAK,CAACwB,WAAW,EAAE7B,UAAU,EAAEW,KAAK,EAAYC,GAAa,CAAC;IAC1F,IAAIX,CAAC,GAAG,CAAC,EAAE;MAAEA,CAAC,EAAE;IAAC,CAAC,CAAC;IACnB,IAAI6B,GAAG,GAAGF,CAAC;IACX,KAAK,IAAIG,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGV,CAAC,EAAEU,EAAE,EAAE,EAAE;MAC7BD,GAAG,IAAI,IAAI,CAACN,YAAY,CAACO,EAAE,GAAG,CAAC,CAAC;IAClC;IACA,OAAOD,GAAG,GAAGvC,kBAAkB,CAACkB,SAAS,CAACkB,IAAI,CAAC1B,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC;EACjE;;EAEA;EACA+B,MAAMA,CAAEC,EAAU,EAAS;IACzBA,EAAE,GAAGhB,IAAI,CAACC,KAAK,CAACe,EAAE,GAAG,GAAG,CAAC;IACzB,IAAIC,IAAI,GAAGjB,IAAI,CAACC,KAAK,CAAC,CAACe,EAAE,IAAI,IAAI,CAACE,OAAO,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC;IACtD,IAAID,IAAI,IAAI,CAAC,EAAE;MAAEA,IAAI,EAAE;IAAC;IACxB,OAAOD,EAAE,IAAI,IAAI,CAACN,IAAI,CAACO,IAAI,IAAIA,IAAI,KAAK,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE;MAC1DA,IAAI,EAAE;MACN,IAAIA,IAAI,KAAK,CAAC,EAAE;QAAEA,IAAI,EAAE;MAAC;IAC3B;IACA,IAAItB,GAAG,GAAGqB,EAAE,GAAGhB,IAAI,CAACC,KAAK,CAAC,IAAI,CAACS,IAAI,CAACO,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAChD,IAAIvB,KAAK,GAAG,CAAC;IACb,OAAOC,GAAG,GAAG,IAAI,CAACQ,WAAW,CAACc,IAAI,EAAEvB,KAAK,CAAC,EAAE;MAC1CC,GAAG,IAAI,IAAI,CAACQ,WAAW,CAACc,IAAI,EAAEvB,KAAK,CAAC;MACpCA,KAAK,EAAE;IACT;IACA,OAAO,IAAI,CAACG,IAAI,CAACoB,IAAI,EAAEvB,KAAK,EAAEC,GAAG,CAAC;EACpC;AACF;AAACwB,OAAA,CAAA7C,kBAAA,GAAAA,kBAAA;AArFC;AACA;AAAAvB,eAAA,CAFIuB,kBAAkB,mBAGwB;EAAE,EAAE,EAAEX;AAAoB,CAAC;AAAAZ,eAAA,CAHrEuB,kBAAkB,eAIWa,kBAAS,CAACiC,QAAQ,CAAC,WAAW,CAAC;AAoFlEjC,kBAAS,CAACkC,QAAQ,CAAC,YAAY,EAAE/C,kBAAkB,CAAC","ignoreList":[]}